name: Docker Deploy Workflow

on:
  push:
    # branches: [ dev ]
    branches: [ '**' ]  # This will match all branches
  workflow_dispatch:  # This enables manual triggering
    inputs:
      version:
        description: 'Override version tag (optional)'
        required: false
        default: ''

env:
  REPO: 'pubmed'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for tags and branches
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set dynamic version
      id: version
      run: |
        # If this is a tag push, use the tag name without the 'v' prefix
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${TAG}" >> $GITHUB_OUTPUT
          echo "Using tag: ${TAG}"
        else
          # Otherwise use short SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "VERSION=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "Using commit SHA: ${SHORT_SHA}"
        fi
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1     # ECR Public requires us-east-1
        role-session-name: GitHubActions-${{ github.run_id }}
        role-duration-seconds: 3600

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
        
    - name: Build and push Docker image
      env:
        PUBLIC_URI: ${{ steps.login-ecr.outputs.registry }}/h8y0t9h1
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |        
        echo "Building version: ${VERSION}"
        
        # Build and push the Docker image
        docker build \
          --platform linux/amd64 \
          -t ${PUBLIC_URI}/${REPO}:${VERSION} \
          -t ${PUBLIC_URI}/${REPO}:latest \
          --push \
          -f Dockerfile .